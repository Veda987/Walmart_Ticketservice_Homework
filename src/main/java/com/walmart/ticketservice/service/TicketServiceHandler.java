package com.walmart.ticketservice.service;

import java.util.Optional;

import com.walmart.ticketservice.model.Level;
import com.walmart.ticketservice.model.Order;
import com.walmart.ticketservice.model.Seat;
import com.walmart.ticketservice.model.Venue;
import com.walmart.ticketservice.util.WalMartException;
import com.walmart.ticketservice.view.Messages;

/**
 * 
 * @author Veda
 *
 *Class TicketServiceHandler implementing the TicketService interface.
 */
public class TicketServiceHandler implements TicketService {
	
	/**
	 * Fields to store state of the class.
	 */
	private static Venue venue;
	WalMartException walmartException;
	
	/**
	 * The method returns an integer value that represents number of seats available, 
	 * by taking the optional integer  parameter venueLevel that represents venue level details.
	 * 
	 *  @param venueLevel the optional integer that represents venue level details.
	 */
	public int numSeatsAvailable(Optional<Integer> venueLevel) {
		try {
			Level level = new Level();
			if (venueLevel.isPresent()) {
				level = venue.getLevelDetails(venueLevel.get());
				System.out
						.println(Messages.appendSpace+level.getLevelName()+ " Has : "+ Integer.toString(level
										.getAvailableSeatsInEachLevel())+" Available Seats."+Messages.newLine);
				return level.getAvailableSeatsInEachLevel();
			} else {
				return 0;
			}
		} catch (Exception e) {
			new WalMartException("-1", e);
			return 0;
			
		}
	}

	/**
	 * Returns a SeatHold object that represents the information regarding the seats held by 
	 * the customer by taking a integer that represents number of seats to be held, 
	 * minimum level to hold seats, maximum level to hold seats, and the customer email.
	 * 
	 * @param numSeats the integer that represents the number of seats to be held.
	 * @param minLevel the Optional integer to represent the minimum level in which the customer want to hold seats.
	 * @param maxLevel the Optional integer to represent the maximum level in which the customer want to hold seats.
	 * @param customerEmail the String that represents the customer email.
	 * @return SeatHold the seatHold object that represents the seat hold details.
	 */
	public SeatHold findAndHoldSeats(int numSeats, Optional<Integer> minLevel,
			Optional<Integer> maxLevel, String customerEmail) {
		try {
			SeatHold seatHold = new SeatHold();
			seatHold.holdSeats(venue, minLevel, maxLevel, numSeats,
					customerEmail);
			return seatHold;
		} catch (Exception e) {
			new WalMartException("-1", e);
			return null;
		}
	}

	/**
	 * Returns a String Object that gives an identification for the seat reservation,
	 * 				the string is generated by appending the letter T for the orderId.
	 * 
	 */
	public String reserveSeats(int seatHoldId, String customerEmail) {
		try {
			int orderId = 0;
			for (Order order : venue.getVenueOrders()) {
				if(order.isOrderExpired()){
					System.out.println(Messages.orderExpired);
					return "-1";
				}
				if (order.getCustomer().getCustomerEmail()
						.equals(customerEmail)) {
					orderId = order.getOrderId();
					if (seatHoldId == orderId) {
						for (Seat seat : order.getSeatsHolded()) {
							seat.setSeatReserved(true);
							return "T" + Integer.toString(orderId);
						}
					}else{
						System.out.println(Messages.inCorrectSeatHoldId);
					}
				}else{
					System.out.println(Messages.inCorrectEmail);
					
				}
			}
			} catch (Exception e) {
			new WalMartException("-1", e);
			return "-1";
		}
		return "-1";
	}

	public Venue getVenue() {
		return venue;
	}

	public void setVenue(Venue venue) {
		this.venue = venue;
	}
}